app.json
"privacy": "unlisted",で非公開に設定できる（publicで公開）


まずsrcにcomponentsとscreensを作る
部品とほとんど完成形のようなもの

gitについて

git status で状態を確認
git add . で全てのファイルを追加
git commit でファイル編集
1番上にコミットメッセージを追記し保存
git log で確認する

からのファイルをgitの対象にするには、
ファイル内に .gitkeepというファイルを作成


npm install --save-dev eslint@8.3.0
--save-dev をつけることで、devでjsonのdevに設定が反映される
npx eslint --init で設定とライブラリのダウンロード


eslincのruleで規制の設定可能
1行だけは例外的にルールから除外したい場合は、
{/* eslint-disable-next-line */}と記載する



  const children = props.children;
  これを下記のように書ける（分割代入）
  const { children } = props;


受け渡したpropsのタイプをコンポーネント側で明示するために
prop-typesを使う必要がある

npm install prop-types@15.7.2

type
Hello.propTypes = {
  children: string.isRequired,
  bang: bool,
};

初期値
Hello.defaultProps = {
  bang: false,
};


テンプレートリテラル
{`Hello ${children}`}


javascriptの中で数字はtrueとして扱われ、0はfalseとして扱われる

bool型
trueの場合は省略可能


属性値をpropsで受け取り上書きする
<Hello style={{ fontSize: 16 }}>Small World</Hello>
<Text style={[styles.text, style]}>
配列で書く
右から順の優先度になる


<View>タグはhtmlでいう<div>タグ

ReactNativeのcss、frexboxは縦に作用する

flexDirection: 'row', //横並びにする
paddingVertical: 16, //上下の余白
paddingHorizontal: 19, //左右の余白


影の設定（これはiOSにしか対応していないメソッド）
shadowColor: '#000000',
shadowOffset: { width: 0, height: 8 }, //xとy
shadowOpacity: 0.25, //透明度
shadowRadius: 8,

影の設定（これはandroidにしか対応していないメソッド）
elevation: 8,
これは高さ、浮いた感じでの表現、数値は決まってる


importは''じゃないと””だとエラー出る

流れとしては全体のコーディングして
コンポーネントに分けていくのがわかりやすい
さらに構造化さらに細かくしていく


<ScrollView>というコンポーネントを使うことで、
スクロール画面に対応することができる！


style: shape(), //オブジェクトの形を定義
空だとなんでもOK


npm install @expo/vector-icons@12.0.5
人気の画像アイコンを集めたライブラリをインストール
https://docs.expo.dev/guides/icons/


icomoon.ic
自分で作った画像をアイコンとして取り込める状態にできる


npm install @use-expo/font@2.0.0
useFonts '@use-expo/font'
fontLoaded


<TextInput value="買い物リスト" multiline />
multilineで複数行にできるリアクトネイティブのドキュメントに書いてある


キーボードを使う場合、入力が終わった後に消すことができない
そのためにKeyboardAvoidingViewというコンポーネントを使う

IOSではI/Oタブからキーボードを表示する


//クリック時の挙動を起こす{

export default function CircleButton(props) {
  const { style, name, onPress} = props;
  return (
    <TouchableOpacity style={[styles.circleButton, style]} onPress={onPress}>
      <Feather name={name} size={32} color="white" />
    </TouchableOpacity>
  );

CircleButton.propTypes = {
  style: shape(),
  name: string.isRequired,
  onPress: func,
};

}

親コンポーネントで挙動設定
<CircleButton name="check" onPress={() => { Alert.alert('Pressed!'); }} />


ルーティング（画面遷移）はナビゲーションという
ReactNavigationというライブラリをインストールして使う

https://reactnavigation.org/docs/5.x/getting-started/

npm show @react-navigation/native
npm install @react-navigation/native@5.8.10
//バージョンは任意

expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view

npm install @react-navigation/stack@^5.x


import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';

import MemoListScreen from './src/screens/MemoListScreen';
// import MemoDetailScreen from './src/screens/MemoDetailScreen';
// import MemoEditScreen from './src/screens/MemoEditScreen';
// import MemoCreateScreen from './src/screens/MemoCreateScreen';
// import LogInScreen from './src/screens/LogInScreen';
// import SignUpScreen from './src/screens/SignUpScreen';

const Stack = createStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Home" component={MemoListScreen} />
      </Stack.Navigator>
      <MemoListScreen />
    </NavigationContainer>
  );
}


ナビゲーションの中身を上書く
onPress={() => {
  navigation.reset({
    index: 0,
    routes: [{ name: 'MemoList' }],
  });
}}
0番目にMemoListを入れる
バックできなくなる


Androidの挙動をiOSのアニメーションを統一する
cardStyleInterpolators: CardStyleInterpolators.forHorizontalIOS,


スクリーンごとに好きなアニメーションを設定することも可能
<Stack.Screen
  name="SignUp"
  component={SignUpScreen}
  options={{
    cardStyleInterpolator: CardStyleInterpolators.forFadeFromBottomAndroid,
  }}
/>


Androidもスワイプでバックできるようにする
gestureEnabled: true,
gestureDirection: 'horizontal',


use~で利用しているコンポーネントは全てreact hooksの概念



最初の文字が大文字になるのを防ぐ
autoCapitalize="none"

入力がメアド入力に適した形になる
keyboardType="email-address"

入力した文字が伏字になる
secureTextEntry

あった方が良い
textContentType="emailAddress"
textContentType="password"


firebaseの初期化設定
if (firebase.apps.length === 0) {
  firebase.initializeApp(firebaseConfig);
}


コールバック関数
thenは会員登録に成功した時
catchは会員登録に失敗した時

firebase.auth().createUserWithEmailAndPassword(email, password)
  .then((userCredential) => {
    const { user } = userCredential;
    console.log(user.uid);
  })
  .catch((error) => {
    console.log(error.code, error.message);
  });

ナビゲーションの処理をthenの中に書くことで、
登録に成功した時だけ画面を遷移させることができる


うまくいかない
useEffect(() => {
  navigation.setOptions({
    headerRight: () => <LogOutButton />,
  });
}, []);


bodyText: bodyText,
このようなキーと値が同じものは省略して書く
bodyText,
