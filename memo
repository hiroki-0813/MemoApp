app.json
"privacy": "unlisted",で非公開に設定できる（publicで公開）


まずsrcにcomponentsとscreensを作る
部品とほとんど完成形のようなもの

gitについて

git status で状態を確認
git add . で全てのファイルを追加
git commit でファイル編集
1番上にコミットメッセージを追記し保存
git log で確認する

からのファイルをgitの対象にするには、
ファイル内に .gitkeepというファイルを作成


npm install --save-dev eslint@8.3.0
--save-dev をつけることで、devでjsonのdevに設定が反映される
npx eslint --init で設定とライブラリのダウンロード


eslincのruleで規制の設定可能
1行だけは例外的にルールから除外したい場合は、
{/* eslint-disable-next-line */}と記載する



  const children = props.children;
  これを下記のように書ける（分割代入）
  const { children } = props;


受け渡したpropsのタイプをコンポーネント側で明示するために
prop-typesを使う必要がある

npm install prop-types@15.7.2

type
Hello.propTypes = {
  children: string.isRequired,
  bang: bool,
};

初期値
Hello.defaultProps = {
  bang: false,
};


テンプレートリテラル
{`Hello ${children}`}


javascriptの中で数字はtrueとして扱われ、0はfalseとして扱われる

bool型
trueの場合は省略可能


属性値をpropsで受け取り上書きする
<Hello style={{ fontSize: 16 }}>Small World</Hello>
<Text style={[styles.text, style]}>
配列で書く
右から順の優先度になる


<View>タグはhtmlでいう<div>タグ

ReactNativeのcss、frexboxは縦に作用する

flexDirection: 'row', //横並びにする
paddingVertical: 16, //上下の余白
paddingHorizontal: 19, //左右の余白


影の設定（これはiOSにしか対応していないメソッド）
shadowColor: '#000000',
shadowOffset: { width: 0, height: 8 }, //xとy
shadowOpacity: 0.25, //透明度
shadowRadius: 8,

影の設定（これはandroidにしか対応していないメソッド）
elevation: 8,
これは高さ、浮いた感じでの表現、数値は決まってる


importは''じゃないと””だとエラー出る

流れとしては全体のコーディングして
コンポーネントに分けていくのがわかりやすい
さらに構造化さらに細かくしていく


<ScrollView>というコンポーネントを使うことで、
スクロール画面に対応することができる！


style: shape(), //オブジェクトの形を定義
空だとなんでもOK


npm install @expo/vector-icons@12.0.5
人気の画像アイコンを集めたライブラリをインストール
https://docs.expo.dev/guides/icons/


icomoon.ic
自分で作った画像をアイコンとして取り込める状態にできる


npm install @use-expo/font@2.0.0
useFonts '@use-expo/font'
fontLoaded


<TextInput value="買い物リスト" multiline />
multilineで複数行にできるリアクトネイティブのドキュメントに書いてある


キーボードを使う場合、入力が終わった後に消すことができない
そのためにKeyboardAvoidingViewというコンポーネントを使う

IOSではI/Oタブからキーボードを表示する


//クリック時の挙動を起こす{

export default function CircleButton(props) {
  const { style, name, onPress} = props;
  return (
    <TouchableOpacity style={[styles.circleButton, style]} onPress={onPress}>
      <Feather name={name} size={32} color="white" />
    </TouchableOpacity>
  );

CircleButton.propTypes = {
  style: shape(),
  name: string.isRequired,
  onPress: func,
};

}

親コンポーネントで挙動設定
<CircleButton name="check" onPress={() => { Alert.alert('Pressed!'); }} />
